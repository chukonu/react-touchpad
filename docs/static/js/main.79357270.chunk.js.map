{"version":3,"sources":["logo.svg","TouchPad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Touch","x","y","isEnded","onExitAnimationEnd","initialClassName","useState","className","setClassName","style","top","left","useEffect","handle","requestAnimationFrame","cancelAnimationFrame","onTransitionEnd","event","TouchPad","children","touches","setTouches","onTouchStart","changedTouches","newTouches","i","length","identifier","pageX","pageY","push","id","onTouchEnd","endedTouchIds","map","touch","includes","onMouseDown","onMouseUp","key","filter","t","removeTouch","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,uMCE3C,SAASC,EAAT,GAKI,IAJAC,EAID,EAJCA,EACAC,EAGD,EAHCA,EAGD,IAFCC,eAED,SADCC,EACD,EADCA,mBAEMC,EAAmBF,EAAU,QAAU,oBAD9C,EAEmCG,mBAASD,GAF5C,mBAEQE,EAFR,KAEmBC,EAFnB,KAGOC,EAAQ,CAAEC,IAAKR,EAAGS,KAAMV,GAgB9B,OAdAW,qBAAU,WACN,IAAIC,EAMJ,MALkB,sBAAdN,EACAM,EAASC,uBAAsB,kBAAMN,EAAa,YAC7B,UAAdD,GAAyBJ,IAChCU,EAASC,uBAAsB,kBAAMN,EAAa,uBAE/C,kBAAMO,qBAAqBF,OAQlC,yBACIN,UAAWA,EACXE,MAAOA,EACPO,gBARR,SAAyBC,GACH,oBAAdV,GAAiCH,OAmF9Bc,MAtEf,YAAiC,IAAbC,EAAY,EAAZA,SAAY,EAEEb,mBAAS,IAFX,mBAErBc,EAFqB,KAEZC,EAFY,KAI5B,SAASC,EAAT,GAEI,IAFuC,IAAnBC,EAAkB,EAAlBA,eACdC,EAAa,GACVC,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IAAK,CAAC,IAAD,EACPF,EAAeE,GAA5CE,EADoC,EACpCA,WAAYC,EADwB,EACxBA,MAAOC,EADiB,EACjBA,MAC3BL,EAAWM,KAAK,CACZC,GAAIJ,EACJ1B,EAAG2B,EACH1B,EAAG2B,EACH1B,SAAS,IAGjBkB,EAAW,GAAD,mBAAKD,GAAYI,IAG/B,SAASQ,EAAT,GAEI,IAFqC,IAAnBT,EAAkB,EAAlBA,eACZU,EAAgB,GACbR,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IAAK,CAAC,IACrCE,EAAeJ,EAAeE,GAA9BE,WACRM,EAAcH,KAAKH,GAEvBN,EAAWD,EAAQc,KAAI,SAACC,GACpB,OAAIF,EAAcG,SAASD,EAAMJ,IACtB,YAAC,eACDI,GADP,IAEIJ,GAAI,KACJ5B,SAAS,IAGVgC,MAwBf,OACI,yBACI5B,UAAW,mBACXe,aAAcA,EACdU,WAAYA,EACZK,YAzBR,SAAqBpB,GAMjBK,EAAa,CAAEC,eALQ,CAAC,CACpBI,WAAY,EACZC,MAAOX,EAAMW,MACbC,MAAOZ,EAAMY,WAsBbS,UAjBR,SAAmBrB,GAIfe,EAAW,CAAET,eAHU,CAAC,CACpBI,WAAY,QAiBXP,EAAQc,KAAI,SAACC,EAAOV,GAAR,OAAc,kBAACzB,EAAD,iBAAWmC,EAAX,CAAkBI,IAAKd,EAAGrB,mBAAoB,kBAZjF,SAAqB+B,GACjBd,EAAWD,EAAQoB,QAAO,SAACC,GAAD,OAAOA,IAAMN,MAW4CO,CAAYP,UAC1FhB,ICzEEwB,MAvBf,WACE,OACE,kBAAC,EAAD,KACE,yBAAKpC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKqC,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEvC,UAAU,WACVwC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,mBCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79357270.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\r\n\r\nfunction Touch({\r\n    x,\r\n    y,\r\n    isEnded = false,\r\n    onExitAnimationEnd\r\n}) {\r\n    const initialClassName = isEnded ? 'touch' : 'touch touch-start';\r\n    const [className, setClassName] = useState(initialClassName);\r\n    const style = { top: y, left: x };\r\n\r\n    useEffect(() => {\r\n        let handle;\r\n        if (className === 'touch touch-start') {\r\n            handle = requestAnimationFrame(() => setClassName('touch'));\r\n        } else if (className === 'touch' && isEnded) {\r\n            handle = requestAnimationFrame(() => setClassName('touch touch-end'));\r\n        }\r\n        return () => cancelAnimationFrame(handle);\r\n    });\r\n\r\n    function onTransitionEnd(event) {\r\n        if (className === 'touch touch-end') onExitAnimationEnd();\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={className}\r\n            style={style}\r\n            onTransitionEnd={onTransitionEnd}\r\n        >\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TouchPad({ children }) {\r\n\r\n    const [touches, setTouches] = useState([]);\r\n\r\n    function onTouchStart({ changedTouches }) {\r\n        const newTouches = [];\r\n        for (let i = 0; i < changedTouches.length; i++) {\r\n            const { identifier, pageX, pageY } = changedTouches[i];\r\n            newTouches.push({\r\n                id: identifier,\r\n                x: pageX,\r\n                y: pageY,\r\n                isEnded: false,\r\n            });\r\n        }\r\n        setTouches([...touches, ...newTouches]);\r\n    }\r\n\r\n    function onTouchEnd({ changedTouches }) {\r\n        const endedTouchIds = [];\r\n        for (let i = 0; i < changedTouches.length; i++) {\r\n            const { identifier } = changedTouches[i];\r\n            endedTouchIds.push(identifier);\r\n        }\r\n        setTouches(touches.map((touch) => {\r\n            if (endedTouchIds.includes(touch.id)) {\r\n                return ({\r\n                    ...touch,\r\n                    id: null,\r\n                    isEnded: true,\r\n                });\r\n            }\r\n            return touch;\r\n        }));\r\n    }\r\n\r\n    function onMouseDown(event) {\r\n        const changedTouches = [{\r\n            identifier: 0,\r\n            pageX: event.pageX,\r\n            pageY: event.pageY,\r\n        }];\r\n        onTouchStart({ changedTouches });\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n        const changedTouches = [{\r\n            identifier: 0,\r\n        }];\r\n        onTouchEnd({ changedTouches });\r\n    }\r\n\r\n    function removeTouch(touch) {\r\n        setTouches(touches.filter((t) => t !== touch));\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={'ripple-container'}\r\n            onTouchStart={onTouchStart}\r\n            onTouchEnd={onTouchEnd}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n        >\r\n            {touches.map((touch, i) => <Touch {...touch} key={i} onExitAnimationEnd={() => removeTouch(touch)} />)}\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TouchPad;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport TouchPad from './TouchPad';\r\n\r\nfunction App() {\r\n  return (\r\n    <TouchPad>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n        </a>\r\n        </header>\r\n      </div>\r\n    </TouchPad>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}